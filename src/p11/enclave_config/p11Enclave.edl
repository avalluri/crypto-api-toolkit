/*
 * Copyright (C) 2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    // For Linux builds..
    from "sgx_tsgxssl.edl" import *; /* Libraries for OpenSSL use in the enclave */
    from "sgx_tstdc.edl" import *; /* Libraries for OpenSSL use in the enclave */
    from "sgx_tae_service.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    include "../include/Constants.h"
    include "sgx_key.h"
    include "sgx_key_exchange.h"

    trusted {
        /* define ECALLs here. */
        // enclave init and deinit functions
        public SgxStatus initCryptoEnclave();

        public SgxStatus deinitCryptoEnclave();

        // hash operations
        public SgxStatus digestInit(uint32_t    hashId,
                                    uint32_t    keyIdForHMAC,
                                    uint8_t     hashMode,
                                    uint8_t     hmac);

        public SgxStatus digestUpdate(uint32_t                      hashId,
                                      [user_check] const uint8_t*   pbMessage,
                                      uint32_t                      cbMessage);

        public SgxStatus digestFinal(uint32_t                               hashId,
                                     [out, size = destBufferLen] uint8_t*   destBuffer,
                                     uint32_t                               destBufferLen);

        public SgxStatus destroyHashState(uint32_t hashId);

        // Symmetric Crypto
        public SgxStatus generateSymmetricKey([user_check] uint32_t*                         keyId,
                                              uint16_t                                       symmetricKeyLen,
                                              [in, size = attributeBufferLen]const uint64_t* attributeBuffer,
                                              uint64_t                                       attributeBufferLen);

        public SgxStatus importSymmetricKey([user_check] uint32_t*                         keyId,
                                            [in, size = symmetricKeyLen] const uint8_t*    keyBuffer,
                                            uint16_t                                       symmetricKeyLen,
                                            [in, size = attributeBufferLen]const uint64_t* attributeBuffer,
                                            uint64_t                                       attributeBufferLen);

        public SgxStatus symmetricEncryptInit(uint32_t                            keyId,
                                              [in, size = ivSize] const uint8_t*  iv,
                                              uint32_t                            ivSize,
                                              [in, size = aadSize] const uint8_t* aad,
                                              uint32_t                            aadSize,
                                              uint8_t                             cipherMode,
                                              int                                 padding,
                                              uint32_t                            tagBits,
                                              int                                 counterBits);

        public SgxStatus symmetricEncryptUpdate(uint32_t                    keyId,
                                                [user_check] const uint8_t* sourceBuffer,
                                                uint32_t                    sourceBufferLen,
                                                [user_check] uint8_t*       destBuffer,
                                                uint32_t                    destBufferLen,
                                                [user_check] uint32_t*      destBufferWritten);

        public SgxStatus symmetricEncrypt(uint32_t                      keyId,
                                          [user_check] const uint8_t*   sourceBuffer,
                                          uint32_t                      sourceBufferLen,
                                          [user_check] uint8_t*         destBuffer,
                                          uint32_t                      destBufferLen,
                                          [user_check] uint32_t*        destBufferWritten);

        public SgxStatus symmetricEncryptFinal(uint32_t                     keyId,
                                               [user_check] uint8_t*        destBuffer,
                                               [user_check] uint32_t*       destBufferWritten);

        public SgxStatus symmetricDecryptInit(uint32_t                            keyId,
                                              [in, size = ivSize] const uint8_t*  iv,
                                              uint32_t                            ivSize,
                                              [in, size = aadSize] const uint8_t* aad,
                                              uint32_t                            aadSize,
                                              uint8_t                             cipherMode,
                                              int                                 padding,
                                              uint32_t                            tagBits,
                                              int                                 counterBits);

        public SgxStatus symmetricDecryptUpdate(uint32_t                     keyId,
                                                [user_check] const uint8_t*  sourceBuffer,
                                                uint32_t                     sourceBufferLen,
                                                [user_check] uint8_t*        destBuffer,
                                                uint32_t                     destBufferLen,
                                                [user_check] uint32_t*       destBufferWritten);

        public SgxStatus symmetricDecrypt(uint32_t                     keyId,
                                          [user_check] const uint8_t*  sourceBuffer,
                                          uint32_t                     sourceBufferLen,
                                          [user_check] uint8_t*        destBuffer,
                                          uint32_t                     destBufferLen,
                                          [user_check] uint32_t*       destBufferWritten);

        public SgxStatus symmetricDecryptFinal(uint32_t                 keyId,
                                               [user_check] uint8_t*    destBuffer,
                                               [user_check] uint32_t*   destBufferWritten);

        public SgxStatus destroyKey(uint32_t keyId, uint8_t keyType);

        // Asymmetric Crypto
        public SgxStatus generateAsymmetricKey([user_check] uint32_t*                                publicKeyId,
                                               [user_check] uint32_t*                                privateKeyId,
                                               uint16_t                                              modulusSize,
                                               [in, size = attributeBufferPublicLen]const uint64_t*  attributeBufferPublic,
                                               uint64_t                                              attributeBufferPublicLen,
                                               [in, size = attributeBufferPrivateLen]const uint64_t* attributeBufferPrivate,
                                               uint64_t                                              attributeBufferPrivateLen);

        public SgxStatus asymmetricEncrypt(uint32_t                            keyId,
                                           [user_check] const uint8_t*         sourceBuffer,
                                           uint32_t                            sourceBufferLen,
                                           [user_check] uint8_t*               destBuffer,
                                           uint32_t                            destBufferLen,
                                           [user_check] uint32_t*              destBufferWritten,
                                           uint8_t                             rsaPadding);

        public SgxStatus asymmetricDecrypt(uint32_t                     keyId,
                                           [user_check] const uint8_t*  sourceBuffer,
                                           uint32_t                     sourceBufferLen,
                                           [user_check] uint8_t*        destBuffer,
                                           uint32_t                     destBufferLen,
                                           [user_check] uint32_t*       destBufferWritten,
                                           uint8_t                      rsaPadding);

        public SgxStatus asymmetricSign(uint32_t                                    keyId,
                                        [in, size = sourceBufferLen] const uint8_t* sourceBuffer,
                                        uint32_t                                    sourceBufferLen,
                                        [out, size = destBufferLen] uint8_t*        destBuffer,
                                        uint32_t                                    destBufferLen,
                                        [user_check] uint32_t*                      destBufferWritten,
                                        uint32_t                                    hashAlgId,
                                        uint8_t                                     paddingScheme,
                                        uint8_t                                     hashMode,
                                        uint32_t                                    salt);

        public SgxStatus asymmetricVerify(uint32_t                                       keyId,
                                          [in, size = sourceBufferLen] const uint8_t*    sourceBuffer,
                                          uint32_t                                       sourceBufferLen,
                                          [in, size = signatureBufferLen] const uint8_t* signatureBuffer,
                                          uint32_t                                       signatureBufferLen,
                                          uint32_t                                       hashAlgId,
                                          uint8_t                                        paddingScheme,
                                          uint8_t                                        hashMode,
                                          uint32_t                                       salt);

        public SgxStatus generateId([user_check] uint32_t* keyId);

        public SgxStatus wrapSymmetricKeyWithSymmetricKey(uint32_t                            keyId,
                                                          uint32_t                            keyIdData,
                                                          [in, size = ivSize] const uint8_t*  iv,
                                                          uint32_t                            ivSize,
                                                          [in, size = aadSize] const uint8_t* aad,
                                                          uint32_t                            aadSize,
                                                          uint8_t                             cipherMode,
                                                          int                                 padding,
                                                          uint32_t                            tagBits,
                                                          int                                 counterBits,
                                                          [user_check] uint8_t*               destBuffer,
                                                          uint32_t                            destBufferLen,
                                                          [user_check] uint32_t*              destBufferWritten);

        public SgxStatus unwrapWithSymmetricKey(uint32_t                                       keyId,
                                                [user_check] uint32_t*                         unwrappedKeyId,
                                                [user_check] const uint8_t*                    sourceBuffer,
                                                uint32_t                                       sourceBufferLen,
                                                [in, size = ivSize] const uint8_t*             iv,
                                                uint32_t                                       ivSize,
                                                [in, size = aadSize] const uint8_t*            aad,
                                                uint32_t                                       aadSize,
                                                uint8_t                                        cipherMode,
                                                int                                            padding,
                                                uint32_t                                       tagBits,
                                                int                                            counterBits,
                                                uint8_t                                        wrappedKeyType,
                                                [in, size = attributeBufferLen]const uint64_t* attributeBuffer,
                                                uint64_t                                       attributeBufferLen);

        public SgxStatus wrapWithAsymmetricKey(uint32_t               asymmetricKeyId,
                                               uint32_t               symmetricKeyId,
                                               [user_check] uint8_t*  destBuffer,
                                               uint32_t               destBufferLen,
                                               [user_check] uint32_t* destBufferWritten,
                                               uint8_t                rsaPadding);

        public SgxStatus unwrapWithAsymmetricKey(uint32_t                                       asymmetricKeyId,
                                                 [user_check] uint32_t*                         unwrappedKeyId,
                                                 [user_check] const uint8_t*                    sourceBuffer,
                                                 uint32_t                                       sourceBufferLen,
                                                 uint8_t                                        rsaPadding,
                                                 [in, size = attributeBufferLen]const uint64_t* attributeBuffer,
                                                 uint64_t                                       attributeBufferLen);

        public SgxStatus asymmetricExportKey(uint32_t               keyId,
                                             [user_check] uint8_t*  destBuffer,
                                             uint32_t               destBufferLen,
                                             [user_check] uint32_t* destBufferWritten,
                                             [user_check] uint32_t* modulusSize,
                                             [user_check] uint32_t* exponentSize);

        public SgxStatus asymmetricImportKey([user_check] uint32_t*                         keyId,
                                             [user_check] uint8_t*                          modulusBuffer,
                                             uint32_t                                       modulusBufferLen,
                                             [user_check] uint8_t*                          exponentBuffer,
                                             uint32_t                                       exponentBufferLen,
                                             [in, size = attributeBufferLen]const uint64_t* attributeBuffer,
                                             uint64_t                                       attributeBufferLen);

        public SgxStatus createReportForKeyHandle(uint32_t                keyId,
                                                  [in] sgx_target_info_t* pTargetInfo,
                                                  [out] sgx_report_t*     pSgxReport);

        public SgxStatus sealPin([in, size = sourceBufferLen] uint8_t* sourceBuffer,
                                 uint32_t                              sourceBufferLen,
                                 [out, size = destBufferLen] uint8_t*  destBuffer,
                                 uint32_t                              destBufferLen,
                                 [user_check] uint32_t*                destBufferWritten);

        public SgxStatus sealData([in, size = sourceBufferLen] uint8_t* sourceBuffer,
                                  uint32_t                              sourceBufferLen,
                                  [out, size = destBufferLen] uint8_t*  destBuffer,
                                  uint32_t                              destBufferLen,
                                  [user_check] uint32_t*                destBufferWritten);

        public SgxStatus validatePin([user_check] uint8_t*               pin,
                                     uint32_t                            pinLen,
                                     [in, size = sealedPinLen] uint8_t*  sealedPin,
                                     uint32_t                            sealedPinLen);

        public SgxStatus clearCacheState(uint32_t keyId);

        public SgxStatus readTokenObjectFile([in, size = filePathLen] const char*       filePath,
                                             uint32_t                                   filePathLen,
                                             uint64_t                                   slotId,
                                             [out, size = attributeBufferLen] uint64_t* attributeBuffer,
                                             uint64_t                                   attributeBufferLen,
                                             [user_check] uint64_t*                     attributeBufferLenRequired,
                                             [user_check] uint32_t*                     keyId);


        public SgxStatus updateTokenObjectFile(uint32_t                                       keyId,
                                               uint8_t                                        keyType,
                                               [in, size = attributeBufferLen]const uint64_t* attributeBuffer,
                                               uint64_t                                       attributeBufferLen);

        public SgxStatus updateSOPinMaterial(uint64_t                             slotId,
                                             [in, size = filePathLen] const char* filePath,
                                             uint32_t                             filePathLen);

        public SgxStatus savePinMaterial(uint64_t                           slotId,
                                         [in, size = sealedPinLen] uint8_t* sealedPin,
                                         uint32_t                           sealedPinLen);

        public SgxStatus updateKeyHandle(uint32_t keyHandle, uint32_t newKeyHandle, uint8_t keyType);

        public SgxStatus generateEccKeyPair([user_check] uint32_t*                                publicKeyId,
                                            [user_check] uint32_t*                                privateKeyId,
                                            [in, size = curveOidLen] const unsigned char*         curveOid,
                                            uint32_t                                              curveOidLen,
                                            [in, size = attributeBufferPublicLen]const uint64_t*  attributeBufferPublic,
                                            uint64_t                                              attributeBufferPublicLen,
                                            [in, size = attributeBufferPrivateLen]const uint64_t* attributeBufferPrivate,
                                            uint64_t                                              attributeBufferPrivateLen);

        public SgxStatus exportEcParams(uint32_t               keyId,
                                        [user_check] uint8_t*  destBuffer,
                                        uint32_t               destBufferLen,
                                        [user_check] uint32_t* destBufferWritten);
    };

    untrusted
    {

    };
};
